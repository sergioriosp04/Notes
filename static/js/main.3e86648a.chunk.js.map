{"version":3,"sources":["components/Navigation.js","components/CreateNote.js","components/CreateUser.js","components/NoteList.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","CreateNote","state","users","userSelected","title","content","date","Date","editing","_id","getUsers","fetch","then","res","json","setState","map","user","username","onSubmit","e","preventDefault","newNote","author","method","body","JSON","stringify","headers","props","history","push","catch","error","console","log","onInputChange","target","name","value","onChangeDate","this","match","params","data","onChange","key","placeholder","required","selected","CreateUser","onSubmitForm","onChangeUsername","deleteUser","onDoubleClick","NoteList","notes","getNotes","deleteNote","note","format","onClick","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e86648a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nclass Navigation extends Component {\n    render(){\n        return(\n            <nav className=\"navbar navbar-expand-lg navbar-darkt bg-dark\">\n                <div className=\"container\">\n                    <Link className=\"navbar-brand\" to=\"/\">\n                        NotesApp\n                    </Link>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                        <ul className=\"navbar-nav ml-auto\">\n                        <li className=\"nav-item active\">\n                            <Link className=\"nav-link\" to=\"/\"> Notes </Link> \n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/create\"> Create Note </Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/user\"> Create User </Link>\n                        </li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n        )\n    }\n}\n\nexport default Navigation\n","import React, { Component } from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\n\nclass CreateNote extends Component {\n\n    state={\n        users: [],\n        userSelected: \"\",\n        title: \"\",\n        content:\"\",\n        date: new Date(),\n        editing: false,\n        _id: \"\"\n    }\n\n    getUsers = () => {\n        //fetch('http://localhost:4000/api/users') corria en local\n        fetch('https://notes-js.herokuapp.com/api/users')\n            .then(res => res.json())\n            .then(res => {\n                this.setState({ \n                    users: res.map(user => user.username), \n                    userSelected: res[0].username\n                })\n            })\n    }\n\n    componentDidMount() {\n        this.getUsers()\n        if(this.props.match.params.id){\n            fetch(`https://notes-js.herokuapp.com/api/notes/${this.props.match.params.id}`)\n                .then(res => res.json())\n                .then(data => {\n                    this.setState({ \n                        title: data.title,\n                        content: data.content,\n                        userSelected: data.author,\n                        date: new Date(data.date),\n                        editing: true,\n                        _id: this.props.match.params.id\n                    })\n                })\n        }\n    }\n\n    onSubmit = (e) =>{\n        e.preventDefault()\n        const newNote = {\n            title: this.state.title,\n            content: this.state.content,\n            date: this.state.date,\n            author: this.state.userSelected\n        }\n        if(this.state.editing){\n            fetch(`https://notes-js.herokuapp.com/api/notes/${this.state._id}`,{\n                method: 'PUT',\n                body: JSON.stringify(newNote), // data can be `string` or {object}!\n                headers:{\n                    'Content-Type': 'application/json'\n                }\n            })\n                .then(res => {\n                    res.json()\n                    this.props.history.push('/')\n                }) \n                .catch(error => console.log('Error', error))\n        }else{\n            fetch('https://notes-js.herokuapp.com/api/notes',{\n                method: 'POST',\n                body: JSON.stringify(newNote), // data can be `string` or {object}!\n                headers:{\n                    'Content-Type': 'application/json'\n                }\n            })\n                .then(res => {\n                    res.json()\n                    this.props.history.push('/')\n                }) \n                .catch(error => console.log('Error', error))\n        }\n    }\n\n    onInputChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    onChangeDate = date =>{\n        this.setState({\n            date: date\n        })\n    }\n\n    render(){\n        return(\n            <div className=\"col-md-6 offset-md-3\">\n                <div className=\"card card-body\">\n                    <h4> Create a Note</h4>\n                    {/*SELECT USER*/}\n                    <div className=\"form-group\">\n                        <select \n                            className=\"form-control\" \n                            name=\"userSelected\"\n                            onChange={this.onInputChange}\n                            value={this.state.userSelected}\n                        >\n                            {\n                                this.state.users.map(user => \n                                <option key={user} value={user} >\n                                    {user}\n                                </option>)\n                            }\n\n                        </select>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <input \n                            type=\"text\" \n                            className=\"form-control\" \n                            placeholder=\"title\" \n                            name=\"title\"\n                            required \n                            onChange={this.onInputChange}\n                            value={this.state.title}\n                            />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <textarea  \n                            className=\"form-control\" \n                            placeholder=\"content\" \n                            name=\"content\"\n                            required \n                            onChange={this.onInputChange}\n                            value={this.state.content}\n                            />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <DatePicker \n                            className=\"form-control\"\n                            selected={this.state.date}\n                            onChange={this.onChangeDate}\n                            />\n                    </div>\n\n                    <form onSubmit={this.onSubmit}>\n                        <button type=\"submit\" className=\"btn btn-primary\">\n                            Save\n                        </button>\n                    </form>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default CreateNote","import React, { Component } from 'react'\n\nclass CreateUser extends Component {\n    \n    state = {\n        users: [],\n        username: \"\"\n    }\n\n    getUsers = () => {\n        //fetch('http://localhost:4000/api/users') // era en local\n        fetch('https://notes-js.herokuapp.com/api/users')\n            .then(res => res.json())\n            .then(res => {\n                this.setState({ users: res })\n            })\n    }\n\n    componentDidMount(){\n        this.getUsers()\n    }\n\n    onSubmitForm = (e) => {\n        e.preventDefault()\n        console.log(this.state)\n        fetch('https://notes-js.herokuapp.com/api/users',{\n            method: 'POST',\n            body: JSON.stringify(this.state), // data can be `string` or {object}!\n            headers:{\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                res.json()\n                this.getUsers()\n                this.setState({ username: \" \" })\n            })\n            .catch(error => console.log('Error', error));\n    }\n\n    onChangeUsername = (e)=> {\n        this.setState({\n            username: e.target.value\n        })\n    }\n\n    deleteUser = (id) => {\n        console.log(id)\n        fetch(`https://notes-js.herokuapp.com/api/users/${id}`,{\n            method: 'DELETE',\n            //body: JSON.stringify(this.id), // data can be `string` or {object}!\n            headers:{\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                res.json()\n                this.getUsers()\n            })\n            .catch(error => console.log('Error', error));\n    }\n\n    render(){\n        return(\n            <div className=\"row\">\n                <div className=\"col-md-4\">\n                    <div className=\"card card-body\">\n                        <h3> Create a New user </h3>\n                        <form onSubmit={this.onSubmitForm} >\n                            <div className=\"form-group\">\n                                <input \n                                    type=\"text\" \n                                    className=\"form-control\" \n                                    onChange={this.onChangeUsername}\n                                    value={this.state.username}\n                                />\n                            </div>\n                            <button type=\"submit\" className=\"btn btn-primary\">\n                                Create\n                            </button>\n                        </form>\n                    </div>\n                </div>\n                <div className=\"col-md-8\">\n                    <ul className=\"list-group\">\n                        {\n                            this.state.users.map(user =>(\n                                <li \n                                    onDoubleClick={()=> this.deleteUser(user._id)}\n                                    className=\"list-group-item list-group-item-action\" \n                                    key={user._id}\n                                >\n                                    {user.username}\n                                </li>\n                            ))\n                        }\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default CreateUser","import React, { Component } from 'react'\nimport { format } from 'timeago.js'\nimport { Link } from 'react-router-dom'\n\nclass NoteList extends Component {\n\n    state={\n        notes:[]\n    }\n\n    getNotes = () => {\n        fetch('https://notes-js.herokuapp.com/api/notes')\n            .then(res =>res.json())\n            .then(data => {\n                this.setState({\n                    notes: data\n                })\n                console.log(this.state)\n            })\n    }       \n \n    componentDidMount(){\n        this.getNotes()\n    }\n\n    deleteNote = (id)=>{\n        console.log(id)\n        fetch(`https://notes-js.herokuapp.com/api/notes/${id}`,{\n            method: 'DELETE',\n            //body: JSON.stringify(this.id), // data can be `string` or {object}!\n            headers:{\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(res => {\n                res.json()\n                this.getNotes()\n            })\n            .catch(error => console.log('Error', error))\n    }\n\n    render(){\n        return(\n            <div className=\"row\">\n                {\n                    this.state.notes.map(note => (\n                        <div className=\"col-md-4 p-2\" key={note._id}>\n                            <div className=\"card\">\n                                <div className=\"card-header d-flex justify-content-between\">\n                                    <h5>{note.title}</h5>\n                                    <Link to={`/edit/${note._id}`} className=\"btn btn-secondary\">\n                                        Edit\n                                    </Link>\n                                </div>\n                                <div className=\"card-body\">\n                                    <p>{note.content}</p>\n                                    <p>{note.author}</p>\n                                    <p>{format(note.date)}</p>\n                                </div>\n                                <div className=\"card-footer\">\n                                    <button className=\"btn btn-danger\" onClick={() => this.deleteNote(note._id) }>\n                                        Delete\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    ))\n                }\n            </div>\n        )\n    }\n}\n\nexport default NoteList","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\n\n//components\nimport Navigation from './components/Navigation'\nimport CreateNote from './components/CreateNote'\nimport CreateUser from './components/CreateUser'\nimport NoteList from './components/NoteList'\n\n\nfunction App() {\n  return (\n    <div>\n      <BrowserRouter>\n        <Navigation />\n        <div className=\"container p-4\">\n          <Route exact path = '/' component= {NoteList} />\n          <Route exact path = '/create' component= {CreateNote} />\n          <Route exact path = '/edit/:id' component= {CreateNote} />\n          <Route exact path = '/user' component= {CreateUser} />\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}